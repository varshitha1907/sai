#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_RULES 10
#define MAX_SYMBOLS 20

// Function to check if two strings are prefixes of each other
int isPrefix(char* str1, char* str2) {
    int len1 = strlen(str1);
    int len2 = strlen(str2);
    if (len1 > len2) {
        return 0;
    }
    for (int i = 0; i < len1; i++) {
        if (str1[i] != str2[i]) {
            return 0;
        }
    }
    return 1;
}

// Function to perform left factoring on a set of grammar rules
void leftFactoring(char grammar[MAX_RULES][MAX_SYMBOLS], int numRules) {
    char factoredGrammar[MAX_RULES][MAX_SYMBOLS];
    char newNonTerminal = 'A';  // Used for new non-terminal

    // Loop through all pairs of rules
    for (int i = 0; i < numRules; i++) {
        for (int j = i + 1; j < numRules; j++) {
            // Check if the two rules have a common prefix
            if (isPrefix(grammar[i], grammar[j])) {
                // Find the longest common prefix
                int k = 0;
                while (grammar[i][k] == grammar[j][k]) {
                    k++;
                }

                // Factoring the common prefix
                char prefix[k + 1];
                strncpy(prefix, grammar[i], k);
                prefix[k] = '\0';

                // Create a new non-terminal production
                char suffix1[MAX_SYMBOLS] = "", suffix2[MAX_SYMBOLS] = "";
                strcpy(suffix1, grammar[i] + k);
                strcpy(suffix2, grammar[j] + k);

                // Add new non-terminal rules
                printf("%c -> %s%c\n", grammar[i][0], prefix, newNonTerminal);
                printf("%c%c -> %s\n", newNonTerminal, newNonTerminal, suffix1);
                printf("%c%c -> %s\n", newNonTerminal, newNonTerminal, suffix2);

                // Increment new non-terminal for the next rule
                newNonTerminal++;
            }
        }
    }
}

int main() {
    char grammar[MAX_RULES][MAX_SYMBOLS];
    int numRules;

    // Input number of grammar rules
    printf("Enter number of grammar rules: ");
    scanf("%d", &numRules);

    // Input the grammar rules
    for (int i = 0; i < numRules; i++) {
        printf("Enter rule %d (e.g., A->ab|ac): ", i + 1);
        scanf("%s", grammar[i]);
    }

    // Apply left factoring
    printf("\nLeft Factored Grammar:\n");
    leftFactoring(grammar, numRules);

    return 0;
}
