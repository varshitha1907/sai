#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SYMBOLS 50
#define MAX_STRING_LENGTH 30

// Structure to represent a symbol (e.g., a variable)
typedef struct Symbol {
    char name[MAX_STRING_LENGTH];  // Symbol name (e.g., variable name)
    char type[MAX_STRING_LENGTH];  // Type of the symbol (e.g., int, float)
} Symbol;

// Symbol Table structure
typedef struct SymbolTable {
    Symbol symbols[MAX_SYMBOLS];  // Array to hold symbols
    int count;                    // Number of symbols currently in the table
} SymbolTable;

// Function to initialize the symbol table
void initializeSymbolTable(SymbolTable *table) {
    table->count = 0;
}

// Function to insert a symbol into the symbol table
void insertSymbol(SymbolTable *table, char *name, char *type) {
    if (table->count >= MAX_SYMBOLS) {
        printf("Error: Symbol table is full.\n");
        return;
    }

    // Check if the symbol already exists
    for (int i = 0; i < table->count; i++) {
        if (strcmp(table->symbols[i].name, name) == 0) {
            printf("Error: Symbol '%s' already exists in the table.\n", name);
            return;
        }
    }

    // Add the new symbol
    strcpy(table->symbols[table->count].name, name);
    strcpy(table->symbols[table->count].type, type);
    table->count++;
}

// Function to search for a symbol in the symbol table
int searchSymbol(SymbolTable *table, char *name) {
    for (int i = 0; i < table->count; i++) {
        if (strcmp(table->symbols[i].name, name) == 0) {
            return i;  // Symbol found, return its index
        }
    }
    return -1;  // Symbol not found
}

// Function to display the symbol table
void displaySymbolTable(SymbolTable *table) {
    if (table->count == 0) {
        printf("Symbol table is empty.\n");
        return;
    }

    printf("Symbol Table:\n");
    printf("---------------------------------\n");
    printf("Name\t\tType\n");
    printf("---------------------------------\n");
    for (int i = 0; i < table->count; i++) {
        printf("%s\t\t%s\n", table->symbols[i].name, table->symbols[i].type);
    }
    printf("---------------------------------\n");
}

int main() {
    SymbolTable symbolTable;
    initializeSymbolTable(&symbolTable);

    int choice;
    char name[MAX_STRING_LENGTH], type[MAX_STRING_LENGTH];
    int index;

    while (1) {
        // Menu to perform symbol table operations
        printf("\nSymbol Table Operations:\n");
        printf("1. Insert Symbol\n");
        printf("2. Search Symbol\n");
        printf("3. Display Symbol Table\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Insert Symbol
                printf("Enter symbol name: ");
                scanf("%s", name);
                printf("Enter symbol type: ");
                scanf("%s", type);
                insertSymbol(&symbolTable, name, type);
                break;

            case 2: // Search Symbol
                printf("Enter symbol name to search: ");
                scanf("%s", name);
                index = searchSymbol(&symbolTable, name);
                if (index != -1) {
                    printf("Symbol '%s' found. Type: %s\n", symbolTable.symbols[index].name, symbolTable.symbols[index].type);
                } else {
                    printf("Symbol '%s' not found.\n", name);
                }
                break;

            case 3: // Display Symbol Table
                displaySymbolTable(&symbolTable);
                break;

            case 4: // Exit
                printf("Exiting...\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
